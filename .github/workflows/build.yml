name: Deploy Temporary site

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Install Nginx
        run: |
          sudo apt update
          sudo apt install -y nginx
          sudo mv /var/www/html/index.nginx-debian.html /var/www/html/index.html

          NGINX_CONF=$(cat <<'EOF'
          server {
              listen 127.0.0.1:80 default_server;
          
              root /var/www/html;
              index index.html index.htm;
          
              server_name _;
          
              location / {
                  try_files $uri $uri/ =404;
              }
          
              location /api/ {
                  proxy_pass http://127.0.0.1:8080;
          
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
          
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
          
                  # proxy_connect_timeout 60s;
                  # proxy_send_timeout 60s;
                  proxy_read_timeout 300s;
              }
          }
          EOF
          )

          echo "$NGINX_CONF" | sudo tee /etc/nginx/sites-available/default > /dev/null
          sudo nginx -t
          if [ $? -ne 0 ]; then
            echo "Nginx configuration test failed!"
            exit 1
          fi
          
          sudo systemctl start nginx
          sudo service nginx status
          
      # --- （可选）配置 Nginx 服务你的网站内容 ---
      # 如果你的 HTML/CSS/JS 文件在仓库的 'public' 目录下
      # - name: Copy website files to Nginx root
      #   run: sudo cp -r ./public/* /var/www/html/

      - name: Setup SSHD
        env:
          SSH_PUBLIC_KEY_SECRET: ${{ secrets.SSHD_AUTHORIZED_KEYS }}
        run: |
          EXPECTED_PUBKEY_VAR="SSH_PUBLIC_KEY_SECRET"
          TARGET_SSH_CONFIG="/etc/ssh/sshd_config"

          TARGET_USER_HOME="~"
          eval TARGET_USER_HOME="$TARGET_USER_HOME"
          TARGET_AUTH_KEYS_FILE="${TARGET_USER_HOME}/.ssh/authorized_keys"
          
          if [ -z "${!EXPECTED_PUBKEY_VAR}" ]; then
            echo "::error:: Environment variable ${EXPECTED_PUBKEY_VAR} is not set or empty."
            echo "Please set it with your SSH public key content before running this script."
            exit 1
          fi
          SSH_PUBLIC_KEY="${!EXPECTED_PUBKEY_VAR}"

          echo "Installing OpenSSH Server..."
          sudo apt install -y openssh-server
          
          echo "Configuring ${TARGET_SSH_CONFIG}..."
          
          echo "Ensuring PubkeyAuthentication is enabled..."
          sudo sed -i 's/^[#[:space:]]*PubkeyAuthentication.*/PubkeyAuthentication yes/' "${TARGET_SSH_CONFIG}"
          if ! grep -q "^PubkeyAuthentication yes" "${TARGET_SSH_CONFIG}"; then
              echo "PubkeyAuthentication yes" | sudo tee -a "${TARGET_SSH_CONFIG}" > /dev/null
          fi
          
          echo "Disabling PasswordAuthentication..."
          sudo sed -i 's/^[#[:space:]]*PasswordAuthentication.*/PasswordAuthentication no/' "${TARGET_SSH_CONFIG}"
          if ! grep -q "^PasswordAuthentication no" "${TARGET_SSH_CONFIG}"; then
               echo "PasswordAuthentication no" | sudo tee -a "${TARGET_SSH_CONFIG}" > /dev/null
          fi

          echo "Disabling ChallengeResponseAuthentication..."
          sudo sed -i 's/^[#[:space:]]*ChallengeResponseAuthentication.*/ChallengeResponseAuthentication no/' "${TARGET_SSH_CONFIG}"
          if ! grep -q "^ChallengeResponseAuthentication no" "${TARGET_SSH_CONFIG}"; then
              echo "ChallengeResponseAuthentication no" | sudo tee -a "${TARGET_SSH_CONFIG}" > /dev/null
          fi

          echo "Disabling UsePAM if exists... "
          sudo sed -i 's/^[#[:space:]]*UsePAM.*/UsePAM no/' "${TARGET_SSH_CONFIG}"
          
          echo "Restarting SSH service..."
          sudo systemctl restart ssh

          echo "Adding public key to ${TARGET_AUTH_KEYS_FILE}..."
          mkdir -p "${TARGET_USER_HOME}/.ssh"
          chmod 700 "${TARGET_USER_HOME}/.ssh"
          echo "${SSH_PUBLIC_KEY}" >> "${TARGET_AUTH_KEYS_FILE}"
          chmod 600 "${TARGET_AUTH_KEYS_FILE}"
          
          echo "SSHD installation and configuration complete."
          echo "Target user home: ${TARGET_USER_HOME}"
          echo "Authorized keys file: ${TARGET_AUTH_KEYS_FILE}"
      
      - name: Setup Xray
        env:
          XRAY_UUID_SECRET: ${{ secrets.XRAY_UUID }}
          XRAY_WS_PATH_SECRET: ${{ secrets.XRAY_WS_PATH }}
        run: |
          if [ -z "$XRAY_UUID_SECRET" ]; then
            echo "::error:: XRAY_UUID secret is not set. Please configure it in your repository settings."
            exit 1
          fi
          if [ -z "$XRAY_WS_PATH_SECRET" ]; then
            echo "::error:: XRAY_WS_PATH is not set. Please configure it (e.g., in repository settings or environment)."
            exit 1
          fi
          mkdir xray
          cd xray

          echo "Downloading latest Xray-core for Linux (64-bit)..."
          curl -Lo xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
          if [ $? -ne 0 ]; then
            echo "::error:: Failed to download Xray-core."
            exit 1
          fi

          echo "Unzipping Xray-core..."
          unzip xray.zip
          # Since there are no subdirectories, files (xray, geoip.dat, geosite.dat) are extracted here
          if [ $? -ne 0 ]; then
            echo "::error:: Failed to unzip Xray-core."
            exit 1
          fi
          rm xray.zip

          echo "Generating config.json..."
          if ! command -v jq &> /dev/null; then
             echo "jq could not be found, installing..."
             sudo apt-get update && sudo apt-get install -y jq
          fi

          # Define the config template using a heredoc and pipe it to jq
          jq --arg uuid "$XRAY_UUID_SECRET" \
          --arg ws_path "$XRAY_WS_PATH_SECRET" \
          '.inbounds[0].settings.clients[0].id = $uuid | .inbounds[0].streamSettings.wsSettings.path = $ws_path' <<'EOF' > config.json
          {
            "log": { "loglevel": "info" },
            "inbounds": [
              {
                "port": 8080,
                "protocol": "vless",
                "allocate": { "strategy": "always" },
                "settings": {
                  "decryption":"none",
                  "clients": [{ "id": "", "level": 1, "alterId": 0 }]
                },
                "streamSettings": {
                  "network": "ws",
                  "wsSettings": {
                    "connectionReuse": true,
                    "path": "/"
                  },
                  "security": "none",
                  "tcpSettings": {
                    "header": {
                      "type": "http",
                      "response": {
                        "version": "1.1",
                        "status": "200",
                        "reason": "OK",
                        "headers": {
                          "Content-Type": [
                            "application/octet-stream",
                            "application/x-msdownload",
                            "text/html",
                            "application/x-shockwave-flash"
                          ],
                          "Transfer-Encoding": ["chunked"],
                          "Connection": ["keep-alive"],
                          "Pragma": "no-cache"
                        }
                      }
                    }
                  }
                }
              }
            ],
            "outbounds": [{ "protocol": "freedom", "settings": {} }]
          }
          EOF

          if [ ! -f config.json ]; then
             echo "::error:: Failed to generate config.json"
             exit 1
          fi
          echo "config.json generated successfully."

          
          echo "Starting Xray..."
          chmod +x xray
          # Add nohup to prevent SIGHUP and redirect output to files
          nohup ./xray run -config config.json &
          cd ..

      - name: Setup Cloudflare Tunnel
        env:
          TUNNEL_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
        run: |
          curl -Lo cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          chmod +x cloudflared
          sudo ./cloudflared tunnel --loglevel warn --no-autoupdate run --token $TUNNEL_TOKEN &
          echo "Cloudflared process started in background (PID: $!)."
          
      - name: Sleep💤
        run: sleep 5h 59m 58s
