name: Deploy Temporary site

# 触发器：可以手动触发此工作流
on:
  workflow_dispatch: # 允许从 Actions 标签页手动运行

jobs:
  deploy:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu Runner

    steps:
      - name: Checkout repository # 如果你的网站文件在仓库中，需要这一步
        uses: actions/checkout@v4

      - name: Install Nginx
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx
          sudo systemctl start nginx # 启动 Nginx 服务
          # 或者使用: sudo service nginx start

      - name: Verify Nginx is running (Optional)
        run: |
          curl localhost > /dev/null
          sudo service nginx status
      - name: ZeroTier
        uses: zerotier/github-action@v1.0.1
        with:
          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}
          auth_token: ${{ secrets.ZEROTIER_CENTRAL_TOKEN }}
          
      # --- （可选）配置 Nginx 服务你的网站内容 ---
      # 如果你的 HTML/CSS/JS 文件在仓库的 'public' 目录下
      # - name: Copy website files to Nginx root
      #   run: sudo cp -r ./public/* /var/www/html/
      #
      # 或者，如果你有自定义的 Nginx 配置文件在仓库的 'nginx.conf'
      # - name: Setup custom Nginx configuration
      #   run: |
      #     sudo cp ./nginx.conf /etc/nginx/sites-available/default
      #     sudo nginx -t # 测试配置是否有效
      #     sudo systemctl reload nginx # 重新加载 Nginx 配置
      - name: Setup Xray
        env:
          XRAY_UUID_SECRET: ${{ secrets.XRAY_UUID }}
        run: |
          # Check if UUID secret is set
          if [ -z "$XRAY_UUID_SECRET" ]; then
            echo "::error:: XRAY_UUID secret is not set. Please configure it in your repository settings."
            exit 1
          fi
          mkdir xray
          cd xray

          echo "Downloading latest Xray-core for Linux (64-bit)..."
          curl -L -o xray-linux-64.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
          if [ $? -ne 0 ]; then
            echo "::error:: Failed to download Xray-core."
            exit 1
          fi

          echo "Unzipping Xray-core..."
          unzip xray-linux-64.zip
          # Since there are no subdirectories, files (xray, geoip.dat, geosite.dat) are extracted here
          if [ $? -ne 0 ]; then
            echo "::error:: Failed to unzip Xray-core."
            exit 1
          fi
          rm xray-linux-64.zip # Clean up the zip file

          echo "Generating config.json..."
          # Use jq to safely insert the UUID into the JSON template
          # Ensure jq is installed (it usually is on ubuntu-latest runners)
          if ! command -v jq &> /dev/null; then
             echo "jq could not be found, installing..."
             sudo apt-get update && sudo apt-get install -y jq
          fi

          # Define the config template using a heredoc and pipe it to jq
          jq --arg uuid "$XRAY_UUID_SECRET" '.inbounds[0].settings.clients[0].id = $uuid' <<'EOF' > config.json
          {
            "log": {
              "loglevel": "info"
            },
            "inbounds": [
              {
                "port": 8080,
                "protocol": "vless",
                "allocate": {
                  "strategy": "always"
                },
                "settings": {
                  "clients": [
                    {
                      "id": "", // Placeholder will be replaced by jq
                      "level": 1,
                      "alterId": 0
                    }
                  ],
                  "disableInsecureEncryption": true
                },
                "streamSettings": {
                  "network": "ws",
                  "wsSettings": {
                    "connectionReuse": true,
                    "path": "/message"
                  },
                  "security": "none",
                  "tcpSettings": {
                    "header": {
                      "type": "http",
                      "response": {
                        "version": "1.1",
                        "status": "200",
                        "reason": "OK",
                        "headers": {
                          "Content-Type": [
                            "application/octet-stream",
                            "application/x-msdownload",
                            "text/html",
                            "application/x-shockwave-flash"
                          ],
                          "Transfer-Encoding": ["chunked"],
                          "Connection": ["keep-alive"],
                          "Pragma": "no-cache"
                        }
                      }
                    }
                  }
                }
              }
            ],
            "outbounds": [
              {
                "protocol": "freedom",
                "settings": {}
              },
              {
                "protocol": "blackhole",
                "settings": {},
                "tag": "blocked"
              }
            ],
            "routing": {
              "domainStrategy": "AsIs",
              "rules": [
                {
                  "type": "field",
                  "ip": [
                    "0.0.0.0/8",
                    "10.0.0.0/8",
                    "100.64.0.0/10",
                    "127.0.0.0/8",
                    "169.254.0.0/16",
                    "172.16.0.0/12",
                    "192.0.0.0/24",
                    "192.0.2.0/24",
                    "192.168.0.0/16",
                    "198.18.0.0/15",
                    "198.51.100.0/24",
                    "203.0.113.0/24",
                    "::1/128",
                    "fc00::/7",
                    "fe80::/10",
                    "geoip:private"
                  ],
                  "outboundTag": "blocked"
                }
              ]
            }
          }
          EOF

          if [ ! -f config.json ]; then
             echo "::error:: Failed to generate config.json"
             exit 1
          fi
          echo "config.json generated successfully."
          # Optional: Display the generated config (excluding sensitive parts if needed)
          # cat config.json

          echo "Making xray executable..."
          chmod +x xray

          echo "Starting Xray..."
          # Run xray in the background so the workflow step can potentially continue
          # If this is the *last* thing the job does, you might not need '&'
          # Add nohup to prevent SIGHUP and redirect output to files
          nohup ./xray run -config config.json
          cd ..

      - name: Run Cloudflare Tunnel
        env:
          TUNNEL_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
        run: |
          wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          chmod +x cloudflared-linux-amd64
          ./cloudflared-linux-amd64 tunnel --no-autoupdate run --token $TUNNEL_TOKEN
